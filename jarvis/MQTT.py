"""
Copyright (c) 2021 Philipp Scheer
"""


import time
import json
from typing import Callable
from jarvis import Logger
from paho.mqtt.client import Client
from paho.mqtt.matcher import MQTTMatcher
import random
import traceback


ONE_TIME_CHANNEL_LENGTH = 64
"""Length in characters (bytes) of the one time channel"""

class MQTT:
    """
    An easy-to-use MQTT wrapper for Jarvis applications
    """

    _responses = {}
    """A storage for all received reponses generated by `onetime()`"""

    def __init__(self, client_id: str = None, host: str = "127.0.0.1", port: int = 1883):
        """
        Initialize a MQTT instance with the following arguments:  
        * `host` specifies the hostname of the MQTT broker (default 127.0.0.1)  
        * `port` specifies the port of the MQTT broker (default 1883)  
        * `client_id` specifies a client id to identify the instance
        """
        self.host = host
        self.port = port

        self.client = Client('jarvis|' + ''.join(random.choices("0123456abcdef", k=16)))

        try:
            self.client.connect(self.host, self.port)
        except Exception:
            print(traceback.format_exc())
            Logger.Logger.e1("MQTT", "Refused", "Connection refused, mosquitto not installed or not running", traceback.format_exc())

    def on_connect(self, fn: Callable):
        """
        A callback function to handle a connection event  
        * `fn` is a callable (usually a function) with the following arguments: [client, userdata, flags, rc]
        """
        self.client.on_connect = fn

    def on_message(self, fn: Callable):
        """
        A callback function to handle a message receive event  
        * `fn` is a callable (usually a function) with the following arguments: [client, userdata, message]
        """
        self.client.loop_start()
        self.client.on_message = fn

    def publish(self, topic: str, payload: str):
        """
        Publish a MQTT message
        * `topic` specifies the topic (eg. application/lights/on)
        * `payload` describes the payload
        """
        return self.client.publish(topic, payload)

    def subscribe(self, topic: str):
        """
        Subscribe to a topic (`on_message` has to be called first)
        * `topic` to subscribe to
        """
        return self.client.subscribe(topic)

    def disconnect(self):
        """
        Disconnect from the broker cleanly.  
        Using disconnect() will not result in a will message being sent by the broker.
        """
        self.client.disconnect()
        return True

    @staticmethod
    def onetime(topic: str, message: object, timeout: int = 2) -> str:
        """Send a onetime message and wait for a result.  
        The client should respond to the generated 'reply-to' channel"""
        try:
            otc = "jarvis/tmp/" + ''.join(random.choice("0123456789abcdef") for _ in range(ONE_TIME_CHANNEL_LENGTH))
            message["reply-to"] = otc
            mqtt = MQTT.MQTT(client_id="one-time-" + str(time.time()))
            mqtt.on_message(MQTT._on_msg)
            mqtt.subscribe("#")
            mqtt.publish(topic, json.dumps(message))
            start = time.time()
            while otc not in MQTT._responses:
                time.sleep(0.1)
                if start + timeout < time.time():
                    MQTT._responses[otc] = False
            response = MQTT._responses[otc]
            del MQTT._responses[otc]
            mqtt.disconnect()
            del mqtt
            return response
        except Exception:
            return None

    @staticmethod
    def _on_msg(client: object, userdata: object, message: object):
        topic = message.topic
        data = message.payload.decode()
        if topic.startswith("jarvis/tmp/"):
            MQTT._responses[topic] = data

    @staticmethod
    def match(subsciption: str, topic: str) -> bool:
        """Check whether a topic matches a subscription.  
        For example:  
        foo/bar would match the subscription foo/# or +/bar  
        non/matching would not match the subscription non/+/+
        """
        matcher = MQTTMatcher()
        matcher[subsciption] = True
        try:
            next(matcher.iter_match(topic))
            return True
        except StopIteration:
            return False
